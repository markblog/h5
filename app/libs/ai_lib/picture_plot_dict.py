__author__ = 'V631932'


"""
Input:

    Pic_name: Filename
    Datafile: dataframe
    picture_info_df: dataframe generated by chart_extractor

Output:

    Generate detailed file dictionary


"""


class picture_plot_dict():

    def __init__(self, Pic_name, Datafile, Tagfile, picture_info_df ):

        self.Pic_name = Pic_name
        self.Datafile = Datafile
        self.Tagfile = Tagfile
        self.picture_info_df = picture_info_df
        self.picture_plot_dict = {}

    def get_effectivedate(self, df):

        return df[df['Tag_Name'] == 'EFFECTIVE DATE']['Tag_Content'].values[0][0]

    def get_period(self, df):

        return df[df['Tag_Name'] == 'Period']['Tag_Content'].values[0][0]

    def get_starttime_endtime(self, df):

        st = df[df['Tag_Name'] == 'DATE RANGE']['Tag_Content'].values[0][-1]
        et = df[df['Tag_Name'] == 'DATE RANGE']['Tag_Content'].values[0][0]

        return st, et

    def get_ranking_filter(self, df):

        top_filter_name = df[df['Tag_Name'] == 'FilterTopkFilter']['Tag_Content'].values[0]

        return top_filter_name

    def get_Y_Group(self, tf):

        return  list(tf['Y Groups'])[0]

    def generate_picture_plot_dict(self):


        file_info_df = self.picture_info_df[self.picture_info_df['Filename'] == self.Pic_name]

        pid = list(file_info_df['Pic_ID'])[0]
        y_Group = self.get_Y_Group(self.Tagfile)
        summary = 'This chart is amazing' #narrative function here
        pictype = file_info_df[file_info_df['Tag_Type'] == 'Type']['Tag_Name'].values[0]

        all_filters = list(file_info_df[file_info_df['Tag_Type'].apply(lambda x: x.startswith('Filter'))]['Tag_Name'])
        tags = dict()
        for i,e in enumerate(all_filters):
            tags[e] = file_info_df[file_info_df['Tag_Name'] == e]['Tag_Content'].values[0]

        id_list = ["P" + "%05d" % i for i in range(219)]

        if pid == id_list[10]:

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            title = 'EMV and {} RoR of Accounts on {}'.format(effective_date, period)
            shorttitle = title

        if pid == 'P00011':

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            title = 'Top 5 Holdings with {} Contribution on {}'.format(period, effective_date)
            shorttitle = title

        if pid == id_list[12]:

            effective_date = self.get_effectivedate(file_info_df)
            title = 'Allocation of EMV by Country by Manager on {}'.format(effective_date)
            shorttitle = title

        if pid == id_list[13]:

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            title = '{} Security Contribution on {}'.format(period, effective_date)
            shorttitle = title

        if pid == id_list[14]:

            effective_date = self.get_effectivedate(file_info_df)
            title = 'Allocation of EMV by Country on {}'.format(effective_date)
            shorttitle = title

        if pid == id_list[15]:

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            title = 'Portfolios by Strategy - {} Rate of Return on {}'.format(period, effective_date)
            shorttitle = title

        if pid == id_list[16]:

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            title = 'Top 10 - {} Value Add Contributors on {}'.format(period, effective_date)
            shorttitle = title

        if pid == id_list[17]:

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            title = 'Bottom 10 - {} Value Add Detractors on {}'.format(period, effective_date)
            shorttitle = title

        if pid == 'P00004':

            data_range = file_info_df[file_info_df['Tag_Name'] == 'EFFECTIVE DATE']['Tag_Content']
            starttime, endtime = self.get_starttime_endtime(file_info_df)

            title = 'Total Monthly Net Cash Flows between {} and {}'.format(starttime,endtime)
            shorttitle = title

        if pid == 'P00005':

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            title = 'Top 10 - {} Value Add Contributors on {}'.format(period, effective_date)
            shorttitle = title

        if pid == 'P00006':

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            title = 'Bottom 10 - {} Value Add Detractors on {}'.format(period, effective_date)
            shorttitle = title

        if pid in id_list[19:29]:

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            x1 = file_info_df[file_info_df['Tag_Type'] == 'X1']['Tag_Name'].values[0]
            x2 = file_info_df[file_info_df['Tag_Type'] == 'X2']['Tag_Name'].values[0]
            title = '{} - Returns by {} and {} on {}'.format(period, x1, x2, effective_date)
            shorttitle = title

        if pid in id_list[29:34]:

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            x1 = file_info_df[file_info_df['Tag_Type'] == 'X1']['Tag_Name'].values[0]
            title = '{} - Returns by {} on {}'.format(period, x1, effective_date)
            shorttitle = title

        if pid in id_list[34:76]:

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            title = '{} - Return Details on {}'.format(period, effective_date)
            shorttitle = title

        if pid in id_list[76:81]:

            x2 = file_info_df[file_info_df['Tag_Type'] == 'X2']['Tag_Name'].values[0]
            title = 'Monthly Flows by {}'.format(x2)
            shorttitle = title

        if pid == 'P00081':

            title = 'Detailed Security Flows'
            shorttitle = title

        if pid == id_list[82]:

            title = 'Detailed Securities and Contribution'
            shorttitle = title

        if pid == 'P00083':

            effective_date = self.get_effectivedate(file_info_df)
            title = 'Fee Ratio and 1 Year Active RoR on {}'.format(effective_date)
            shorttitle = title

        if pid == id_list[84]:

            effective_date = self.get_effectivedate(file_info_df)
            title = 'Fee Ratio and 1 Year RoR on {}'.format(effective_date)
            shorttitle = title

        if pid == id_list[85]:

            effective_date = self.get_effectivedate(file_info_df)
            title = 'EMV and 1 Year RoR on {}'.format(effective_date)
            shorttitle = title

        if pid == id_list[86]:

            effective_date = self.get_effectivedate(file_info_df)
            title = 'Manager Expenses 1 Year RoR on {}'.format(effective_date)
            shorttitle = title

        if pid in id_list[88:130]:

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            title = '{} - Contribution to Holdings on {}'.format(period, effective_date)
            shorttitle = title

        if pid in id_list[130:172]:

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            title = '{} - Contribution to Flows on {}'.format(period, effective_date)
            shorttitle = title

        if pid in id_list[172:214]:

            effective_date = self.get_effectivedate(file_info_df)
            period = self.get_period(file_info_df)
            title = '{} - Contribution to Value Add on {}'.format(period, effective_date)
            shorttitle = title

        if pid == id_list[214]:

            starttime, endtime = self.get_starttime_endtime(file_info_df)

            title = 'Cumulative Return from {} to {}'.format(starttime, endtime)
            shorttitle = title

        if pid == id_list[215]:

            starttime, endtime = self.get_starttime_endtime(file_info_df)

            title = 'Point to Point Return from {} to {}'.format(starttime, endtime)
            shorttitle = title

        if pid == id_list[216]:

            starttime, endtime = self.get_starttime_endtime(file_info_df)

            title = 'Cumulative Return from {} to {}'.format(starttime, endtime)
            shorttitle = title

        if pid == id_list[217]:

            title = 'Return of Accounts'
            shorttitle = title

        if pid == id_list[218]:

            accountname = file_info_df[file_info_df['Tag_Name'] == 'ACCOUNT NAME']['Tag_Content'].values[0][0]
            starttime, endtime = self.get_starttime_endtime(file_info_df)

            title = 'Returns of {} between {} and {}'.format(accountname, starttime, endtime)
            shorttitle = title

        self.picture_plot_dict['title'] = title
        self.picture_plot_dict['short_title'] = shorttitle
        self.picture_plot_dict['tags'] = tags
        self.picture_plot_dict['type'] = pictype
        self.picture_plot_dict['related_charts'] = []
        self.picture_plot_dict['Y_Group'] = y_Group
        self.picture_plot_dict['summary'] = summary
        self.picture_plot_dict['data'] = self.Datafile

    # def generate_picture_plot_dict(self):
    #
    #
    #
    #     file_info_df = self.picture_info_df[self.picture_info_df['Filename'] == self.Pic_name]
    #     pid = list(file_info_df['Pic_ID'])[0]
    #
    #     summary = 'This chart is amazing' #narrative function here
    #     pictype = file_info_df[file_info_df['Tag_Type'] == 'Type']['Tag_Name'].values[0]
    #     all_filters = list(file_info_df[file_info_df['Tag_Type'].apply(lambda x: x.startswith('Filter'))]['Tag_Name'])
    #     tags = dict()
    #     for i,e in enumerate(all_filters):
    #         tags[e] = file_info_df[file_info_df['Tag_Name'] == e]['Tag_Content'].values[0]
    #
    #
    #     if pid == 'P00011':
    #
    #         effective_date = self.get_effectivedate(file_info_df)
    #         period = self.get_period(file_info_df)
    #         title = 'Top 5 Holdings with {} Contribution on {}'.format(period, effective_date)
    #         shorttitle = title
    #
    #     if pid == 'P00004':
    #
    #         data_range = file_info_df[file_info_df['Tag_Name'] == 'EFFECTIVE DATE']['Tag_Content']
    #         starttime, endtime = self.get_starttime_endtime(file_info_df)
    #
    #         title = 'Total Monthly Net Cash Flows between {} and {}'.format(starttime,endtime)
    #         shorttitle = title
    #
    #     if pid == 'P00005':
    #
    #         effective_date = self.get_effectivedate(file_info_df)
    #         period = self.get_period(file_info_df)
    #         title = 'Top 10 - {} Value Add Contributors on {}'.format(period, effective_date)
    #         shorttitle = title
    #
    #     if pid == 'P00006':
    #
    #         effective_date = self.get_effectivedate(file_info_df)
    #         period = self.get_period(file_info_df)
    #         title = 'Bottom 10 - {} Value Add Detractors on {}'.format(period, effective_date)
    #         shorttitle = title
    #
    #     if pid == 'P00022':
    #
    #         effective_date = self.get_effectivedate(file_info_df)
    #         period = self.get_period(file_info_df)
    #         x1 = file_info_df[file_info_df['Tag_Type'] == 'X1']['Tag_Name'].values[0]
    #         x2 = file_info_df[file_info_df['Tag_Type'] == 'X2']['Tag_Name'].values[0]
    #         title = '{} - Returns by {} and {} on {}'.format(period, x1, x2, effective_date)
    #         shorttitle = title
    #
    #     if pid == 'P00073':
    #
    #         effective_date = self.get_effectivedate(file_info_df)
    #         period = self.get_period(file_info_df)
    #         title = '{} - Return Details on {}'.format(period, effective_date)
    #         shorttitle = title
    #
    #     if pid == 'P00077':
    #
    #         x2 = file_info_df[file_info_df['Tag_Type'] == 'X2']['Tag_Name'].values[0]
    #         title = 'Monthly Flows by {}'.format(x2)
    #         shorttitle = title
    #
    #     if pid == 'P00081':
    #
    #         title = 'Detailed Security Flows and Contribution'
    #         shorttitle = title
    #
    #     if pid == 'P00083':
    #
    #         effective_date = self.get_effectivedate(file_info_df)
    #         title = 'Manager Fee Detail and 1 Year RoR on {}'.format(effective_date)
    #         shorttitle = title
    #
    #     if pid == 'P00217':
    #
    #         accountname = file_info_df[file_info_df['Tag_Name'] == 'ACCOUNT NAME']['Tag_Content'].values[0][0]
    #         starttime, endtime = self.get_starttime_endtime(file_info_df)
    #
    #         title = 'Returns of {} between {} and {}'.format(accountname, starttime, endtime)
    #         shorttitle = title
    #
    #     else:
    #         title = 'No title at this moment'
    #         shorttitle = title
    #     self.picture_plot_dict['title'] = title
    #     self.picture_plot_dict['short_title'] = shorttitle
    #     self.picture_plot_dict['tags'] = tags
    #     self.picture_plot_dict['type'] = pictype
    #     self.picture_plot_dict['related_charts'] = []
    #     self.picture_plot_dict['highlight'] = {}
    #     self.picture_plot_dict['summary'] = summary
    #     self.picture_plot_dict['data'] = self.Datafile
